#pragma once
#define PI acos(-1)

namespace mt
{
	// Хранение данных
	struct Point
	{
		// В структурах по дефолту все данные в публичном доступе через точку -> p.(все есть)
		int x, y;
	};

	// КlAss
	class Circle
	{
		// В классе по дефолту все данные закрыты для использование через точку -> circle.(ниче нету)
	public: // дает доступ
		// Конструктор, не имеет типа ДОЛЖЕН НАЗЫВАТЬСЯ ТАКЖЕ КАК И КlAss
		// Конструктор вызывается при создании объекта 
		// В любом классе есть конструктор по умолчанию
		Circle() {}
		Circle(Point M, int R);
		// Деструктор
		// Не имеет типа, имя совпадает с названием класса
		// Деструктор вызывается при уничтожении объекта
		// Всегда есть деструктор по дефолту
		// Обычно нечего помещать, но если бы был динам массив, то мы бы сюда запихнули delete
		~Circle();
		
		// Передавать в ф-ю ничего не нужно т.к все данные есть в классе.
		double Square();

		void SetR(int R);
		int Get() { return m_R; }
		void SetM(Point M);

	private:

		Point m_M;
		int	m_R;

	};

}
